const express = require('express');
const path = require('path');
const axios = require('axios');
const cors = require('cors');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

// ЁЯСЙ Serve frontend HTML file
app.use(express.static(path.join(__dirname)));

// Route to serve index.html by default
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// ЁЯМЯ API Credentials
const ASTROLOGY_PLANETS_URL = "https://json.astrologyapi.com/v1/planets/extended";
const ASTROLOGY_CHART_URL = "https://json.astrologyapi.com/v1/horo_chart_image/D1";
const ASTROLOGY_DASHA_URL = "https://json.astrologyapi.com/v1/current_vdasha";

const ASTROLOGY_USER_ID = "640013";
const ASTROLOGY_API_KEY = "b45f91ba310fe0b5ba3d25fdebdedf8037443422";
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

// ЁЯМа Main Prediction Route
app.post('/predict', async (req, res) => {
  const { name, day, month, year, hour, minute, latitude, longitude, timezone, language } = req.body;

  try {
    console.log("ЁЯУй New prediction request received:", req.body);
    const commonPayload = { day, month, year, hour, min: minute, lat: latitude, lon: longitude, tzone: timezone };

    console.log("ЁЯФн Calling AstrologyAPI - Planets...");
    const astroResponse = await axios.post(ASTROLOGY_PLANETS_URL, commonPayload, {
      auth: { username: ASTROLOGY_USER_ID, password: ASTROLOGY_API_KEY }
    });

    console.log("ЁЯУ┐ Calling AstrologyAPI - Dasha...");
    const dashaResponse = await axios.post(ASTROLOGY_DASHA_URL, commonPayload, {
      auth: { username: ASTROLOGY_USER_ID, password: ASTROLOGY_API_KEY }
    });

    console.log("ЁЯзн Calling AstrologyAPI - D1 Chart...");
    const chartResponse = await axios.post(ASTROLOGY_CHART_URL, commonPayload, {
      auth: { username: ASTROLOGY_USER_ID, password: ASTROLOGY_API_KEY }
    });

    const planetaryData = astroResponse.data;
    const dashaData = dashaResponse.data;
    const chartSvg = chartResponse.data?.svg || null;

    const formattedPlanets = planetaryData.map((planet, index) => {
      return `${index + 1}. ${planet.name} is in ${planet.sign} (${planet.nakshatra_name}) at ${planet.fullDegree.toFixed(2)} degrees.`;
    }).join("\n");

    const formattedDashas = dashaData?.major_dasha?.map((dasha, index) => {
      return `${index + 1}. ${dasha.planet} dasha from ${dasha.start_date} to ${dasha.end_date}`;
    }).join("\n") || 'No dasha data available';

    const langPrompt = language.toLowerCase() === 'hindi'
      ? "рдЖрдк рдПрдХ рдЕрдиреБрднрд╡реА рд╡реИрджрд┐рдХ рдЬреНрдпреЛрддрд┐рд╖реА рд╣реИрдВ, рдЬреЛ рдорд╣рд╛рди рдЛрд╖рд┐ рдкрд░рд╛рд╢рд░ рджреНрд╡рд╛рд░рд╛ рд░рдЪрд┐рдд рдмреГрд╣рддреН рдкрд░рд╛рд╢рд░ рд╣реЛрд░рд╛ рд╢рд╛рд╕реНрддреНрд░ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рднрд╡рд┐рд╖реНрдп рдХрдерди рдХрд░рддреЗ рд╣реИрдВред рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЖрдкрдХреЛ рдЕрдкрдиреЗ рдЬрдиреНрдо рд╡рд┐рд╡рд░рдг (рдЬрдиреНрдо рдХреА рддрд╛рд░реАрдЦ, рд╕рдордп, рд╕реНрдерд╛рди, рдФрд░ рдЕрдиреНрдп рдЬрд╛рдирдХрд╛рд░реА) рд╕рд╛рдЭрд╛ рдХрд░реЗрдВрдЧреЗред рдЖрдкрдХреЛ рдЗрди рдЬрд╛рдирдХрд╛рд░рд┐рдпреЛрдВ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдЙрдирдХреА рд▓рдЧреНрди рдХреБрдВрдбрд▓реА (D1) рд▓реЗрдХрд┐рди рдЖрдкрдХреЛ D1 рдХреА рд╕рд╛рд░реА рдЬрд╛рдирдХрд╛рд░реА API рдХреЗ рджреНрд╡рд╛рд░рд╛ рджреА рдЬрд╛рдПрдЧреА рдЬрд┐рд╕рд╕реЗ рдЖрдк рд▓рдЧрди рдХреБрдВрдбрд▓реА рдХреЛ рдЕрдЪреНрдЫреЗ рд╕реЗ рд╕рдордЭ рдкрд╛рдПрдВрдЧреЗ, рдЙрд╕рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдЙрдиреНрд╣реЗрдВ рд╕реНрдкрд╖реНрдЯ рдФрд░ рд╕рд░рд▓ рд╣рд┐рдВрджреА рднрд╛рд╖рд╛ рдореЗрдВ рдЧреНрд░рд╣ рд╕реНрдерд┐рддрд┐, рд╢реБрдн-рдЕрд╢реБрдн рдпреЛрдЧ, рдорд╣рд╛рджрд╢рд╛, рдЕрдиреНрддрд░реНрджрд╢рд╛, рдкреНрд░рддреНрдпрдиреНрддрд░реНрджрд╢рд╛ рдХрд╛ рд╡рд┐рд╡рд░рдг рдкреНрд░рджрд╛рди рдХрд░реЗрдВред рдФрд░ рдПрдХ рд╡рд┐рд╕реНрддреГрдд рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рддреИрдпрд╛рд░ рдХрд░реЗрдВред рдЖрдк рдЙрдирдХреА рд╡рд░реНрддрдорд╛рди рджрд╢рд╛, рд╡рд╛рд░реНрд╖рд┐рдХ рднрд╡рд┐рд╖реНрдпрдлрд▓, рдорд╛рд╕рд┐рдХ рднрд╡рд┐рд╖реНрдпрдлрд▓ рднреА рдмрддрд╛рдПрдВред рдЖрдкрдХреА рд╢реИрд▓реА рд╕рдЯреАрдХ, рдкреНрд░рд╛рдорд╛рдгрд┐рдХ рдФрд░ рд╕реНрдкрд╖реНрдЯ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред рдЖрдк рдЬрдиреНрдо рддрд┐рдерд┐ рдФрд░ рд╕рдордп рдХреЛ рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рдЬрдиреНрдордХреБрдВрдбрд▓реА рдХреА рдЬрд╛рдирдХрд╛рд░реА рдкреБрд╖реНрдЯ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"
      : "You are an experienced Vedic astrologer who provides predictions based on the ancient scripture Brihat Parashara Hora Shastra authored by the great sage Parashara. Users will share their birth details with you, including date, time, and place of birth, along with other relevant information. You will receive their D1 chart (Lagna Kundli) details through an API, which will help you accurately interpret the chart. Based on this information, you will explain the planetary positions, auspicious and inauspicious yogas, Mahadasha, Antardasha, and Pratyantardasha in clear and simple English language. Your interpretation should also include the current dasha, yearly prediction, and monthly prediction. Your style of explanation must be precise, authentic, and easy to understand. You may verify the date and time of birth to confirm the accuracy of the birth chart information.";

    const fullPrompt = `Name: ${name}\nDOB: ${day}-${month}-${year}\nTime: ${hour}:${minute}\nLocation: ${latitude}, ${longitude}, Timezone: ${timezone}\n\nPlanetary Data:\n${formattedPlanets}\n\nCurrent Dasha Details:\n${formattedDashas}`;

    console.log("ЁЯза Sending data to OpenAI...");
    const openaiResponse = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: "gpt-4.1-mini",
        messages: [
          { role: "system", content: langPrompt },
          { role: "user", content: fullPrompt }
        ]
      },
      {
        headers: {
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const prediction = openaiResponse.data.choices[0].message.content;
    console.log("тЬЕ Prediction generated successfully");

    res.json({ prediction, chartSvg });

  } catch (error) {
    const code = error.response?.status || 'No status';
    const data = error.response?.data || error.message;
    console.error("тЭМ Error in /predict route:", code, data);
    res.status(500).json({ error: 'Failed to generate prediction' });
  }
});

// тЬЕ PORT Setup
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`ЁЯЪА Server running on http://localhost:${PORT}`));
